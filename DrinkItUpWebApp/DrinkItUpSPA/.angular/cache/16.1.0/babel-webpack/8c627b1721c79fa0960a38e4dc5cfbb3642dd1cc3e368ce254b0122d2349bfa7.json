{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let MixerComponent = class MixerComponent {\n  constructor(mixerService) {\n    this.mixerService = mixerService;\n    this.allIngredientsNames = [];\n    this.ingredientNames = [];\n    this.chosenIngredientsNames = [];\n    this.results = new Map();\n    this.input = '';\n    this.mixerService.autoCompleteIngredientsSub.subscribe(data => {\n      this.ingredientNames = data;\n    });\n    this.mixerService.chosenIngredientsNamesSub.subscribe(data => {\n      this.chosenIngredientsNames = data;\n    });\n    this.mixerService.ingredientsNamesSub.subscribe(data => {\n      this.allIngredientsNames = data;\n    });\n    this.mixerService.resultsSub.subscribe(data => {\n      this.results = data;\n    });\n  }\n  onKeyUp(input) {\n    console.log('what?');\n    this.mixerService.getAutoComplete(input);\n  }\n  addIngredient(ingredientName) {\n    this.mixerService.addIngredient(ingredientName);\n    this.mixerService.getAutoComplete(this.input);\n    this.allIngredientsNames.forEach((element, index) => {\n      if (element === ingredientName) {\n        this.allIngredientsNames.splice(index, 1);\n      }\n    });\n  }\n  removeIngredient(ingredientName) {\n    this.mixerService.removeIngredient(ingredientName);\n    this.mixerService.getAutoComplete(this.input);\n    this.allIngredientsNames.push(ingredientName);\n    this.allIngredientsNames.sort();\n  }\n  searchByIngredients() {\n    this.mixerService.searchByIngredients();\n  }\n};\nMixerComponent = __decorate([Component({\n  selector: 'app-mixer',\n  templateUrl: './mixer.component.html',\n  styleUrls: ['./mixer.component.css']\n})], MixerComponent);","map":{"version":3,"names":["Component","MixerComponent","constructor","mixerService","allIngredientsNames","ingredientNames","chosenIngredientsNames","results","Map","input","autoCompleteIngredientsSub","subscribe","data","chosenIngredientsNamesSub","ingredientsNamesSub","resultsSub","onKeyUp","console","log","getAutoComplete","addIngredient","ingredientName","forEach","element","index","splice","removeIngredient","push","sort","searchByIngredients","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ulisu\\Desktop\\Projects\\InfoShare\\Projekt\\JCSZR9-Barmani\\DrinkItUpWebApp\\DrinkItUpSPA\\src\\app\\mainbody\\mixer\\mixer.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { DrinkSearchModel } from 'src/app/shared/drinkSearch.model';\r\nimport { MixerService } from 'src/app/shared/mixer.service';\r\n\r\n@Component({\r\n  selector: 'app-mixer',\r\n  templateUrl: './mixer.component.html',\r\n  styleUrls: ['./mixer.component.css']\r\n})\r\nexport class MixerComponent {\r\nallIngredientsNames: string[] = [];\r\ningredientNames: string[] = [];\r\nchosenIngredientsNames: string[] = [];\r\n\r\nresults = new Map<string,DrinkSearchModel[]>();\r\n\r\ninput:string = '';\r\n\r\nconstructor(private mixerService: MixerService){\r\n  this.mixerService.autoCompleteIngredientsSub.subscribe((data: string[]) =>{\r\n    this.ingredientNames = data\r\n  });\r\n\r\n  this.mixerService.chosenIngredientsNamesSub.subscribe((data: string[]) =>{\r\n    this.chosenIngredientsNames = data\r\n  });\r\n\r\n  this.mixerService.ingredientsNamesSub.subscribe((data: string[]) =>{\r\n    this.allIngredientsNames = data\r\n  });\r\n\r\n  this.mixerService.resultsSub.subscribe(data =>{\r\n    this.results = data as Map<string,DrinkSearchModel[]>;\r\n  });\r\n};\r\n\r\nonKeyUp(input: string){\r\n  console.log('what?')\r\n  this.mixerService.getAutoComplete(input);\r\n}\r\n\r\naddIngredient(ingredientName: string){\r\n  this.mixerService.addIngredient(ingredientName);\r\n  this.mixerService.getAutoComplete(this.input);\r\n  this.allIngredientsNames.forEach((element,index)=>{\r\n    if(element === ingredientName)\r\n    {\r\n      this.allIngredientsNames.splice(index,1);\r\n    }\r\n  })\r\n}\r\n\r\nremoveIngredient(ingredientName: string){\r\n  this.mixerService.removeIngredient(ingredientName);\r\n  this.mixerService.getAutoComplete(this.input);\r\n  this.allIngredientsNames.push(ingredientName);\r\n  this.allIngredientsNames.sort();\r\n\r\n}\r\n\r\nsearchByIngredients(){\r\n  this.mixerService.searchByIngredients();\r\n}\r\n\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAS3BC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IARhC,KAAAC,mBAAmB,GAAa,EAAE;IAClC,KAAAC,eAAe,GAAa,EAAE;IAC9B,KAAAC,sBAAsB,GAAa,EAAE;IAErC,KAAAC,OAAO,GAAG,IAAIC,GAAG,EAA6B;IAE9C,KAAAC,KAAK,GAAU,EAAE;IAGf,IAAI,CAACN,YAAY,CAACO,0BAA0B,CAACC,SAAS,CAAEC,IAAc,IAAI;MACxE,IAAI,CAACP,eAAe,GAAGO,IAAI;IAC7B,CAAC,CAAC;IAEF,IAAI,CAACT,YAAY,CAACU,yBAAyB,CAACF,SAAS,CAAEC,IAAc,IAAI;MACvE,IAAI,CAACN,sBAAsB,GAAGM,IAAI;IACpC,CAAC,CAAC;IAEF,IAAI,CAACT,YAAY,CAACW,mBAAmB,CAACH,SAAS,CAAEC,IAAc,IAAI;MACjE,IAAI,CAACR,mBAAmB,GAAGQ,IAAI;IACjC,CAAC,CAAC;IAEF,IAAI,CAACT,YAAY,CAACY,UAAU,CAACJ,SAAS,CAACC,IAAI,IAAG;MAC5C,IAAI,CAACL,OAAO,GAAGK,IAAsC;IACvD,CAAC,CAAC;EACJ;EAEAI,OAAOA,CAACP,KAAa;IACnBQ,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,IAAI,CAACf,YAAY,CAACgB,eAAe,CAACV,KAAK,CAAC;EAC1C;EAEAW,aAAaA,CAACC,cAAsB;IAClC,IAAI,CAAClB,YAAY,CAACiB,aAAa,CAACC,cAAc,CAAC;IAC/C,IAAI,CAAClB,YAAY,CAACgB,eAAe,CAAC,IAAI,CAACV,KAAK,CAAC;IAC7C,IAAI,CAACL,mBAAmB,CAACkB,OAAO,CAAC,CAACC,OAAO,EAACC,KAAK,KAAG;MAChD,IAAGD,OAAO,KAAKF,cAAc,EAC7B;QACE,IAAI,CAACjB,mBAAmB,CAACqB,MAAM,CAACD,KAAK,EAAC,CAAC,CAAC;;IAE5C,CAAC,CAAC;EACJ;EAEAE,gBAAgBA,CAACL,cAAsB;IACrC,IAAI,CAAClB,YAAY,CAACuB,gBAAgB,CAACL,cAAc,CAAC;IAClD,IAAI,CAAClB,YAAY,CAACgB,eAAe,CAAC,IAAI,CAACV,KAAK,CAAC;IAC7C,IAAI,CAACL,mBAAmB,CAACuB,IAAI,CAACN,cAAc,CAAC;IAC7C,IAAI,CAACjB,mBAAmB,CAACwB,IAAI,EAAE;EAEjC;EAEAC,mBAAmBA,CAAA;IACjB,IAAI,CAAC1B,YAAY,CAAC0B,mBAAmB,EAAE;EACzC;CAEC;AAvDY5B,cAAc,GAAA6B,UAAA,EAL1B9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWhC,cAAc,CAuD1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
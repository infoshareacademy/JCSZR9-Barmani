{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./drink-endpoint.service\";\nimport * as i2 from \"./ingredient-endpoint.service\";\nexport class MixerService {\n  constructor(drinkEnpoint, ingredientEndpoint) {\n    this.drinkEnpoint = drinkEnpoint;\n    this.ingredientEndpoint = ingredientEndpoint;\n    this.ingredientsNamesSub = new Subject();\n    this.chosenIngredientsNamesSub = new Subject();\n    this.resultsSub = new Subject();\n    this.autoCompleteIngredientsSub = new Subject();\n    this.chosenIngredientsNames = [];\n    this.ingredientNames = [];\n    this.results = new Map();\n    this.ingredientEndpoint.getAllNames().subscribe(data => {\n      this.ingredientNames = data;\n      this.ingredientsNamesSub.next(this.ingredientNames);\n    });\n  }\n  getAutoComplete(input) {\n    console.log('up?');\n    let chosen = this.chosenIngredientsNames.join(',');\n    console.log('chosen:' + chosen);\n    if (chosen === '') {\n      chosen = 'ygryt';\n    }\n    if (input === '') {\n      input = 'nothing';\n    }\n    this.drinkEnpoint.autoCompleteMixer(input, chosen).subscribe(data => {\n      this.autoCompleteIngredientsSub.next(data);\n    });\n  }\n  addIngredient(ingredientName) {\n    this.chosenIngredientsNames.push(ingredientName);\n    this.chosenIngredientsNamesSub.next(this.chosenIngredientsNames);\n  }\n  removeIngredient(ingredientName) {\n    this.chosenIngredientsNames.forEach((element, index) => {\n      if (element === ingredientName) {\n        this.chosenIngredientsNames.splice(index, 1);\n      }\n    });\n    this.chosenIngredientsNamesSub.next(this.chosenIngredientsNames);\n  }\n  searchByIngredients() {\n    this.drinkEnpoint.searchByIngredients(this.chosenIngredientsNames.join()).subscribe(data => {\n      this.results = data;\n      console.log(this.results);\n      this.resultsSub.next(this.results);\n    });\n  }\n}\nMixerService.ɵfac = function MixerService_Factory(t) {\n  return new (t || MixerService)(i0.ɵɵinject(i1.DrinkEndpointService), i0.ɵɵinject(i2.IngredientEndpointService));\n};\nMixerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MixerService,\n  factory: MixerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Subject","MixerService","constructor","drinkEnpoint","ingredientEndpoint","ingredientsNamesSub","chosenIngredientsNamesSub","resultsSub","autoCompleteIngredientsSub","chosenIngredientsNames","ingredientNames","results","Map","getAllNames","subscribe","data","next","getAutoComplete","input","console","log","chosen","join","autoCompleteMixer","addIngredient","ingredientName","push","removeIngredient","forEach","element","index","splice","searchByIngredients","i0","ɵɵinject","i1","DrinkEndpointService","i2","IngredientEndpointService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ulisu\\Desktop\\Projects\\InfoShare\\Projekt\\JCSZR9-Barmani\\DrinkItUpWebApp\\DrinkItUpSPA\\src\\app\\shared\\mixer.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DrinkEndpointService } from './drink-endpoint.service';\nimport { Subject } from 'rxjs';\nimport { IngredientEndpointService } from './ingredient-endpoint.service';\nimport { DrinkSearchModel } from './drinkSearch.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MixerService {\n\n  constructor(private drinkEnpoint: DrinkEndpointService, private ingredientEndpoint: IngredientEndpointService) { \n    this.ingredientEndpoint.getAllNames().subscribe( data =>{\n      this.ingredientNames = data\n      this.ingredientsNamesSub.next(this.ingredientNames);\n    })   \n  }\n\n  ingredientsNamesSub = new Subject<string[]>();\n  chosenIngredientsNamesSub = new Subject<string[]>();\n  resultsSub= new Subject<Map<string,DrinkSearchModel[]>>();\n  autoCompleteIngredientsSub = new Subject<string[]>();\n\n  private chosenIngredientsNames: string[] = [];\n  private ingredientNames: string[] = [];\n  private results: Map<string,DrinkSearchModel[]> = new Map<string,DrinkSearchModel[]>();\n\n\ngetAutoComplete(input:string){\n  console.log('up?')\n  let chosen = this.chosenIngredientsNames.join(',');\n  console.log('chosen:'+chosen)\n  if(chosen === '')\n  {\n    chosen = 'ygryt'\n  }\n  if(input === '')\n  {\n    input = 'nothing'\n  }\n  this.drinkEnpoint.autoCompleteMixer(input,chosen).subscribe(data =>{\n    this.autoCompleteIngredientsSub.next(data as string[]);\n  });\n}\n\naddIngredient(ingredientName: string){\n  this.chosenIngredientsNames.push(ingredientName);\n  this.chosenIngredientsNamesSub.next(this.chosenIngredientsNames);\n}\n\nremoveIngredient(ingredientName: string)\n{\n  this.chosenIngredientsNames.forEach((element,index)=>{\n    if(element === ingredientName)\n    {\n      this.chosenIngredientsNames.splice(index, 1);\n    }\n  });\n\n  this.chosenIngredientsNamesSub.next(this.chosenIngredientsNames);\n}\n\nsearchByIngredients(){\n  this.drinkEnpoint.searchByIngredients(this.chosenIngredientsNames.join()).subscribe(data =>{\n    this.results = data as Map<string,DrinkSearchModel[]>; \n    console.log(this.results);\n    this.resultsSub.next(this.results);\n    });\n    \n  }\n}\n"],"mappings":"AAEA,SAASA,OAAO,QAAQ,MAAM;;;;AAO9B,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,YAAkC,EAAUC,kBAA6C;IAAzF,KAAAD,YAAY,GAAZA,YAAY;IAAgC,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAOlF,KAAAC,mBAAmB,GAAG,IAAIL,OAAO,EAAY;IAC7C,KAAAM,yBAAyB,GAAG,IAAIN,OAAO,EAAY;IACnD,KAAAO,UAAU,GAAE,IAAIP,OAAO,EAAkC;IACzD,KAAAQ,0BAA0B,GAAG,IAAIR,OAAO,EAAY;IAE5C,KAAAS,sBAAsB,GAAa,EAAE;IACrC,KAAAC,eAAe,GAAa,EAAE;IAC9B,KAAAC,OAAO,GAAmC,IAAIC,GAAG,EAA6B;IAbpF,IAAI,CAACR,kBAAkB,CAACS,WAAW,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAG;MACtD,IAAI,CAACL,eAAe,GAAGK,IAAI;MAC3B,IAAI,CAACV,mBAAmB,CAACW,IAAI,CAAC,IAAI,CAACN,eAAe,CAAC;IACrD,CAAC,CAAC;EACJ;EAYFO,eAAeA,CAACC,KAAY;IAC1BC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;IAClB,IAAIC,MAAM,GAAG,IAAI,CAACZ,sBAAsB,CAACa,IAAI,CAAC,GAAG,CAAC;IAClDH,OAAO,CAACC,GAAG,CAAC,SAAS,GAACC,MAAM,CAAC;IAC7B,IAAGA,MAAM,KAAK,EAAE,EAChB;MACEA,MAAM,GAAG,OAAO;;IAElB,IAAGH,KAAK,KAAK,EAAE,EACf;MACEA,KAAK,GAAG,SAAS;;IAEnB,IAAI,CAACf,YAAY,CAACoB,iBAAiB,CAACL,KAAK,EAACG,MAAM,CAAC,CAACP,SAAS,CAACC,IAAI,IAAG;MACjE,IAAI,CAACP,0BAA0B,CAACQ,IAAI,CAACD,IAAgB,CAAC;IACxD,CAAC,CAAC;EACJ;EAEAS,aAAaA,CAACC,cAAsB;IAClC,IAAI,CAAChB,sBAAsB,CAACiB,IAAI,CAACD,cAAc,CAAC;IAChD,IAAI,CAACnB,yBAAyB,CAACU,IAAI,CAAC,IAAI,CAACP,sBAAsB,CAAC;EAClE;EAEAkB,gBAAgBA,CAACF,cAAsB;IAErC,IAAI,CAAChB,sBAAsB,CAACmB,OAAO,CAAC,CAACC,OAAO,EAACC,KAAK,KAAG;MACnD,IAAGD,OAAO,KAAKJ,cAAc,EAC7B;QACE,IAAI,CAAChB,sBAAsB,CAACsB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;;IAEhD,CAAC,CAAC;IAEF,IAAI,CAACxB,yBAAyB,CAACU,IAAI,CAAC,IAAI,CAACP,sBAAsB,CAAC;EAClE;EAEAuB,mBAAmBA,CAAA;IACjB,IAAI,CAAC7B,YAAY,CAAC6B,mBAAmB,CAAC,IAAI,CAACvB,sBAAsB,CAACa,IAAI,EAAE,CAAC,CAACR,SAAS,CAACC,IAAI,IAAG;MACzF,IAAI,CAACJ,OAAO,GAAGI,IAAsC;MACrDI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,OAAO,CAAC;MACzB,IAAI,CAACJ,UAAU,CAACS,IAAI,CAAC,IAAI,CAACL,OAAO,CAAC;IAClC,CAAC,CAAC;EAEJ;;AA5DWV,YAAY,C;mBAAZA,YAAY,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,oBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,yBAAA;AAAA;AAAZrC,YAAY,C;SAAZA,YAAY;EAAAsC,OAAA,EAAZtC,YAAY,CAAAuC,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}